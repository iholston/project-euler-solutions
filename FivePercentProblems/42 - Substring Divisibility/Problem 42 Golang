// fun, and had to learn new algorithm. Heaps algo for generating permutations.
package main
import ("fmt"
        "strings"
        "strconv"
)

var pan = 0
// This func checks the "random" 7 "things" specified in the problem
func randomChecks(num []int, stringnum string) {
  h := strconv.Itoa(num[1]) + strconv.Itoa(num[2]) + strconv.Itoa(num[3])
  o := strconv.Itoa(num[2]) + strconv.Itoa(num[3]) + strconv.Itoa(num[4])
  j := strconv.Itoa(num[3]) + strconv.Itoa(num[4]) + strconv.Itoa(num[5])
  k := strconv.Itoa(num[4]) + strconv.Itoa(num[5]) + strconv.Itoa(num[6])
  l := strconv.Itoa(num[5]) + strconv.Itoa(num[6]) + strconv.Itoa(num[7])
  m := strconv.Itoa(num[6]) + strconv.Itoa(num[7]) + strconv.Itoa(num[8])
  n := strconv.Itoa(num[7]) + strconv.Itoa(num[8]) + strconv.Itoa(num[9])
  a, _ := strconv.Atoi(h)
  b, _ := strconv.Atoi(i)
  c, _ := strconv.Atoi(j)
  d, _ := strconv.Atoi(k)
  e, _ := strconv.Atoi(l)
  f, _ := strconv.Atoi(m)
  g, _ := strconv.Atoi(n)
  // These are the "random" 7 "things"
  if (a % 2 == 0 && b % 3 == 0 && c % 5 == 0 && d % 7 == 0 && e % 11 == 0 && f % 13 == 0 && g % 17 == 0) {
    pan2, _ := strconv.Atoi(stringnum)
    pan += pan2
  }
}

// Takes an array of ints that represent a number and checks if that number is pandigital hands to randomChecks if pandigital
func pandigital(a []int) {
  numbers := [10]string{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}
  bigstring := ""
  for _, num := range a {
    bigstring += strconv.Itoa(num)
  }
  for _, num := range nubmers {
    if strings.Count(bigstring, numb) != 1 {
      return
    }
  }
  randomChecks(a, bigstring)
  return
}

// Got this function from https://www.geeksforgeeks.org/heaps-algorithm-for-generating-permutations/ and put it into golang
func heapPerms (a []int, size int) { // dont need third param cuz that was only for printing out to screen
  if size == 1 {
    pandigital(a)
  }
  for i := 0; i < size; i++ {
    heapPerms(a, size-1)
    if size % 2 == 1 {
      temp := a[0]
      a[0] = a[size - 1]
      a[size-1] = temp
    } else {
      temp := a[i]
      a[i] = a[size-1]
      a[size-1] = temp
    }
  }
}

func main() {
  a:= []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
  n := len(a)
  heapPerms(a, n)
  fmt.Println(pan)
}
