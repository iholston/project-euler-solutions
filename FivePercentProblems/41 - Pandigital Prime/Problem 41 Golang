// Easy

package main

import ("fmt"
        "math"
        "strconv"
        "strings"
)

// This function is from my earlier primes problem solutions
// Slightly modified with a stop value. Finds all primes up to that number.
func seiveOfEratosthenes(stop int) []int {
    primelist := []bool{}
    primes := []int{}
    for i := 0; i < stop; i++ {
        primelist = append(primelist, true)
    }
    for i := 2; i < int(math.Ceil(math.Sqrt(float64(stop)))); i++ { // research seive. Only need up to sqrt
        if primelist[i] == true {
            for j := 0; j <= stop; j++ {
                if i*i + j*i > stop - 1 {
                    break
                } else {
                    primelist[i*i + j*i] = false
                }
            }
        }
    }
    for i, val := range primelist {
        if i == 0 || i == 1 {
            continue
        }
        if val == true {
            primes = append(primes, i)
        }
    }
    return primes
}

func isPrime(x int, primes []int) bool {
    if x == 1 {
        return false
    }
    for _, prime := range primes {
        if prime == x {
            return true
        }
        if prime > x { // saves from going through the rest of the primes
            return false
        }
    }
    return false
}

// got this from an earlier pandigital problem and slightly modded it
func pandigital(a int) bool {
  numbers := [9]string{"1", "2", "3", "4", "5", "6", "7", "8", "9"}
  bigstring := strconv.Itoa(a)
  for i, numb := range numbers {
    if strings.Count(bigstring, numb) != 1 {
      if len(bigstring) == i {
        return true
      }
      return false
    }
  }
  return true
}

func main() {
  big := 0
  primes := seiveOfEratosthenes(10000000)
  for _, prime := range primes {
    if pandigital(prime) {
      big = prime
    }
  }
  fmt.Println(big)
}
