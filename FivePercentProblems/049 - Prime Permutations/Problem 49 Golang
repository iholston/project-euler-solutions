// the "eurika!" of finally finishing this problem makes it perhaps my favorite of the first 50 so far
// took me a good amount of time because i tried so many different ways of solving this problem but the fact that it was sooo many steps
// for me and it worked out was so rewarding
// 61.77131ms
package main
import ("fmt"
        "math"
        "time"
        "strconv"
        "sort"
)

var biglist = [][]int{} // This array of arrays stores all prime permutations of each of its prime indexes over 1000
                        // ie biglist[1487] contains [1487 1847 4817 4871 7481 7841 8147 8741]

// seive of erasthonese (spelling?) that i have used in every euler primes problem
func generate() []int {
  primelist := []bool{}
  primes := []int{}
  stop := 10000
  for i := 0; i < stop; i++ {
    primelist = append(primelist, true)
  }
  for i := 2; i < int(math.Ceil(math.Sqrt(float64(stop)))); i++ {
    if primelist[i] == true {
      for j := 0; j <= stop; j++ {
        if i*i + j*i > stop - 1 {
          break
        } else {
          primelist[i*i + j*i] = false
        }
      }
    }
  }
  for i, val := range primelist {
    if i < 1000 { // <------- only need primes that are over 1000 but less than "stop" 10000
      continue
    }
    if val == true {
      primes = append(primes, i)
    }
  }
  return primes
}

// This function gets a permutation of b (b is the original prime that we are generating a permutation of) and adds it to biglist
// if the permutation is a prime number
func check(a []string, b int, primes []int) {
  // convert a which is the array of "int strings" ie "1" into the actual integer
  s := "" 
  isprime := false
  for i := 0; i < 4; i++ {
    s += a[i]
  }
  d, _ := strconv.Atoi(s)
  // make sure the permutation is prime
  for _, prime := range primes {
    if d == prime {
      isprime = true
      break
    }
  }
  if isprime { // if it's prime add to biglist
    biglist[b] = append(biglist[b], d)
  }
}

// Got this function from https://www.geeksforgeeks.org/heaps-algorithm-for-generating-permutations/ and put it into golang
// and obviously modified it for this particular problem. it takes a prime number and creates a permutation for it and hands it to check()
func heapPerms (a []string, size int, prime int, primes []int) { // dont need third param cuz that was only for printing out to screen
  if size == 1 {check(a, prime, primes)}
  for i := 0; i < size; i++ {
    heapPerms(a, size-1, prime, primes)
    if size % 2 == 1 {
      temp := a[0]
      a[0] = a[size - 1]
      a[size-1] = temp
    } else {
      temp := a[i]
      a[i] = a[size-1]
      a[size-1] = temp
    }
  }
}

// golang does not have a .unique for its slices so i had to use this which i found online somewhere
func unique(list []int) []int {
  keys := make(map[int][bool)
  newlist := []int{}
  for _, thing := range list {
    if _, value := keys[thing]; !value {
      keys[thing] = true
      newlist = append(newlist, thing)
    }
  }
  return newlist
}

// This function takes the "data massaged" ie no duplicates and in ascending order lists from biglists and finds if 
// any of them are "equadistant" from each other ie how 1487, 4817, 8147 are 3330 away from each other
func findsequence(list []int) {
  answersheet := make(map[string]int) // This has the pair being subtracted as the string key and the difference as the value
                                      // an example input would be "14874817":3330 this allows for easy, quick checking if differences are same
  for i := 0; i < len(list) - 1; i ++ {
    for j := i + 1; j < len(list); j++ {
      answersheet[strconv.Itoa(list[i]) + strconv.Itoa(list[j])] = list[j] - list[i]
    }
  }
  for key, value := range answersheet {
    for key2, value2 := range answersheet {
      if key == key2 {continue} // to get rid of the obvious match
      if value == value2 { // eurika time
        if key[4:] == key2[:4] { // this makes sure they are in squence, rather than  1, 3 (difference of 2
                                // 4, 6 (difference of 2) it needs to be 1, 3, 3, 5. if you remove this you will see more clearly
          fmt.Println(key + key2[4:]) // formatted to come out as 12 digit number the question asked for
        }
      }
    }
  }
}

func main() {
  start := time.Now()
  handoff := []string{}
  primes := generate()
  for i := 0; i < 10000; i++ {
    biglist = append(biglist, []int{})
  }
  // fill out biglist with the permutations of each prime
  for _, prime := range primes {
    handoff = handoff[:0] // clears slice
    sprime := strconv.Itoa(prime)
    handoff = append(handoff, string(sprime[0]))
    handoff = append(handoff, string(sprime[1]))
    handoff = append(handoff, string(sprime[2]))
    handoff = append(handoff, string(sprime[3]))
    heapPerms(handoff, 4, prime, primes)
  }
  // remove duplicates and put in ascending order each of those lists. also removes duplicates sets of lists. ie if 
  // the index of the list is found in a prior list, that index will be set to nil. the nice lists are handed to findsequence()
  for i := 0; i < 10000; i++ {
    if biglist[i] == nil {continue}
    biglist[i] = unique(biglist[i])
    sort.Ints(biglist[i])
    for j := 1; j < len(biglist[i]); j++ {
      biglist[biglist[i][j]] = nil
    }
    findsequence(biglist[i])
  }
  fmt.Println(time.Since(start))
}

