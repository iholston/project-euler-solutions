# copied this by hand from the online editor i used to solve this so there may be some syntax errors or something



# Variables needed

numbers = []

amicables = []

numbersunder = 10000

primes = [0]



# Massage data. Removing primes removes over 1000 numbers to search

# Finding primes comes from what i learned in problem 10. The online

# Python editors im using don't work if its too much to compute so this

# wouldn't be necessary on a normal computer

# Seive of Erathsenes

primelist = []

for i in range(numbersunder):

  primelist.append(True)

for i in range(2, int(numbersunder**(.5))):

  if primelist[i] == True:

    for j in range(int(numbersunder/i - 1)):

      if i*i+j*i > numbersunder -1:

        break

      else:

      primelist[i*i+j*i] = False

for i, primebool in enumerate(primelist):

  if i == 0:

    continue:

  if primebool == True:

    primes.append(i)

# End SOE



for i in range(numbersunder + 1):

  if i in primes:

    continue

  numbers.append(i)

  

def isamicable(x):

  properdivisors = []

  properdivisorsA = []

  for i in range(1, x):

    if x % i == 0:

      properdivisors.append(i)

  possibleamic = sum(properdivisors)

  for j in range(1, possibleamic):

    if possibleamic % j == 0:

      properdivisorsA.append(j)

  if sum(properdivisorsA) == x:

    if x != sum(properdivisors):

      return [True, sum(properdivisors)]

  return [False, None]

  

for num in numbers:

  amicable = isamicable(num)

  if amicable[0]:

    amicables.append(num)

    amicables.append(amicable[1])

    numbers.remove(amicable[1])



print(sum(amicables))
